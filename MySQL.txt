üõ°Ô∏èSQL SERVER
üßødb.js
const sql = require('mssql');

const config = {
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    server: process.env.DB_SERVER,
    database: process.env.DB_DATABASE,

    options: {
        encrypt: true, // Caso o servidor exija criptografia SSL
        trustServerCertificate: true, // Esta op√ß√£o permite que voc√™ confie em certificados autoassinados
    }
};

async function selectCustomers() {
    try {
        await sql.connect(config);
        const result = await sql.query`SELECT * FROM setupusi`;
        return result.recordset;
    } catch (error) {
        throw error;
    } finally {
        await sql.close();
    }
}

async function insertCustomer(HRpedido, login, cc, maquina, item, operacao, lote, horario, status, calibrador, HRfinalizado, obs) {
    try {
        await sql.connect(config);
        const result = await sql.query`INSERT INTO setupusi (HRpedido, login, cc, maquina, item, operacao, lote, horario, status, calibrador, HRfinalizado, obs) 
                                    VALUES (${HRpedido}, ${login}, ${cc}, ${maquina}, ${item}, ${operacao}, ${lote}, ${horario}, ${status}, ${calibrador}, ${HRfinalizado}, ${obs})`;
        return result;
    } catch (error) {
        throw error;
    } finally {
        await sql.close();
    }
}

async function updateStatus(id, novoStatus) {
    try {
        await sql.connect(config);
        const result = await sql.query`UPDATE setupusi SET status = ${novoStatus} WHERE Id = ${id}`;
        return result;
    } catch (error) {
        throw error;
    } finally {
        await sql.close();
    }
}

async function excluirSetupUsiPorId(id) {
    try {
        await sql.connect(config);
        const result = await sql.query`DELETE FROM setupusi WHERE id = ${id}`;
        return result;
    } catch (error) {
        throw error;
    } finally {
        await sql.close();
    }
}

module.exports = { selectCustomers, insertCustomer, updateStatus, excluirSetupUsiPorId };

üßøconnSetupUsi.js
require("dotenv").config();

const express = require('express');
const app = express();
const port = process.env.PORT;
const db = require('./db'); // Importe o arquivo db.js
const cors = require('cors'); // Importe o pacote CORS

app.use(express.json());
app.use(cors()); // Use o middleware do CORS para permitir solicita√ß√µes de todas as origens

app.get('/', (req, res) => res.json({ message: 'Funcionando!' }));

//___________________________________________________________________________________
// Rota para adicionar um novo cliente
//___________________________________________________________________________________
app.post('/setupusi', async (req, res) => {
    const { HRpedido, login, cc, maquina, item, operacao, lote, horario, status, calibrador, HRfinalizado, obs} = req.body;

    try {
        const result = await db.insertCustomer( HRpedido, login, cc, maquina, item, operacao, lote, horario, status, calibrador, HRfinalizado, obs);
        res.status(201).json({ message: 'Setup adicionado com sucesso', id: result.insertId });
    } catch (error) {
        console.error('Erro ao adicionar Setup:', error);
        res.status(500).json({ error: 'Erro ao adicionar Setup' });
    }
});
//___________________________________________________________________________________
// carregar setup
//___________________________________________________________________________________
// Rota para obter os setups existentes
app.get('/setupusi', async (req, res) => {
    try {
        const setups = await db.selectCustomers(); // Chame a fun√ß√£o que obt√©m os setups do banco de dados
        res.status(200).json(setups); // Envie os setups obtidos como resposta
    } catch (error) {
        console.error('Erro ao buscar setups:', error);
        res.status(500).json({ error: 'Erro ao buscar setups' });
    }
});
//___________________________________________________________________________________
// Rota para atualizar o status da solicita√ß√£o
// Em connSetupUsi.js

app.put('/atualizar-status/:id', async (req, res) => {
    const setupId = req.params.id;
    const { status } = req.body;

    try {
        const result = await db.updateStatus(setupId, status);
        res.status(200).json({ message: 'Status atualizado com sucesso.' });
    } catch (error) {
        console.error('Erro ao atualizar o status:', error);
        res.status(500).json({ error: 'Erro interno ao atualizar o status.' });
    }
});
//___________________________________________________________________________________
// Rota para lidar com a exclus√£o de um setup de usinagem pelo ID
//___________________________________________________________________________________
app.delete('/delete/:id', async (req, res) => {
    const id = req.params.id;

    try {
        const result = await db.excluirSetupUsiPorId(id);
        res.status(200).json({ message: 'Setup de usinagem exclu√≠do com sucesso' });
    } catch (error) {
        console.error('Erro ao excluir setup de usinagem:', error);
        res.status(500).json({ error: 'Erro ao excluir setup de usinagem' });
    }
});
//___________________________________________________________________________________
// Inicia o servidor
//___________________________________________________________________________________
app.listen(port, () => {
    console.log(`API funcionando na porta ${port}`);
});



üßøSolicitarSetupUsinagem.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <title>Listagem de Agendamentos</title>
</head>
<body>
    
    <div class="header">
        <div class="LOGO1">
            <a href="/html/Menu.html">
                <img src="/img/Usinagem/Sem t√≠tulo.png" alt="Imagem 3D">
            </a>
        </div>
        <div class="LOGO2">
            <img src="/img/docol_logo.png" alt="Imagem 3D">
        </div>
        <h1>Lista de Equipamentos</h1>
        <div class="sidebar-buttons-container">
            <button class="sidebar-button" type="button" onclick="openForm()">Solicitar Setup</button>
            <button class="sidebar-button" type="button" onclick="MostrarLista()">Mostrar Lista</button>
            <button class="sidebar-button" type="button" onclick="MostrarGrade()">Mostrar Grade</button>
        </div>
    </div>
    <div class="linha-separadora1"></div>

    <!-- Formul√°rio sobreposto -->
    <div class="overlay" id="overlay">
        <div class="modal">
            <h2>Solicita√ß√£o de Setup</h2>
            <form id="formNovoSetupUsi">
                <label for="centro-custo">Centro de Custo:</label>
                <input type="text" id="centro-custo" name="centro-custo"><br>

                <label for="maquina">M√°quina:</label>
                <input type="text" id="maquina" name="maquina"><br>

                <label for="item">Item:</label>
                <input type="text" id="item" name="item"><br>

                <label for="hora">Hora:</label>
                <input type="time" id="hora" name="hora"><br>

                <label for="operacao">Opera√ß√£o:</label>
                <select id="operacao" name="operacao">
                    <option value="1">1¬™ Opera√ß√£o</option>
                    <option value="2">2¬™ Opera√ß√£o</option>
                    <option value="3">3¬™ Opera√ß√£o</option>
                </select><br>

                <label for="lote">Lote:</label>
                <input type="text" id="lote" name="lote"><br>

                <label for="observacao">Observa√ß√£o:</label>
                <textarea id="observacao" name="observacao"></textarea><br>

                <button type="submit">Solicitar</button>
                <button type="button" onclick="closeForm()">Cancelar</button>

            </form>
        </div>
    </div>
    <div id="pedidosContainer"></div>
    <!-- Restante do seu HTML -->
    <div class="container1">   
        <div class="scroll-wrapper">
            <div id="pedidosContainer" class="card-container">
                <!-- Cart√µes ser√£o adicionados aqui dinamicamente -->
            </div>    
        </div>
    </div>

    <div id="agendamentosContainer1"></div>

    <link rel="stylesheet" href="/css/global.css">
    <link rel="stylesheet" href="/css/SolicitarSetupUsinagem.css">

    <script>
// Defina a fun√ß√£o para atualizar os dados
function atualizarDados() {
    // Fa√ßa uma solicita√ß√£o fetch para a rota /setupusi
    fetch('http://localhost:5500/setupusi')
        .then(response => response.json())
        .then(data => {
            // Limpe o conte√∫do do cont√™iner antes de adicionar novos elementos
            const pedidosContainer = document.getElementById('pedidosContainer');
            pedidosContainer.innerHTML = '';

            // Itere sobre os dados recebidos e crie um cart√£o para cada solicita√ß√£o
            data.forEach(solicitacao => {
                // Cria um novo elemento div para representar o cart√£o
                const card = document.createElement('div');
                card.classList.add('card');

                // Crie um novo elemento div para representar o conte√∫do do cart√£o
                const cardContent = document.createElement('div');
                cardContent.classList.add('card-content');

                // Defina o conte√∫do do cart√£o com base nos dados da solicita√ß√£o
                cardContent.innerHTML = `

                                    <button class="menu-button">Menu</button>
                                    <div class="status-buttons">
                                        <button class="button-aguardando">Aguardando</button>
                                        <button class="button-atendendo">Atendendo</button>
                                        <button class="button-concluido">Conclu√≠do</button>
                                        <button class="button-cancelado">Cancelado</button>
                                        <button class="button-excluir">Excluir</button>
                                    </div>

                                    <form id="formAlterarSetup">
                                    <div class="info0">
                                        <div><label class="texto1">Id:</label></div>  
                                        <div><label class="info-line">${solicitacao.Id}</p></label ></div>

                                        <div class="linha-separadora"></div> 
                                        <div><label class="texto1">CentroCusto:</label></div>  
                                        <div><label class="info-line">${solicitacao.cc}</p></label ></div>

                                        <div class="linha-separadora"></div>    
                                        <div><label class="texto1">Item:</label></div>  
                                        <div><label class="info-line">${solicitacao.item}</p></label ></div>

                                        <div class="linha-separadora"></div>    
                                        <div><label class="texto1">Hora:</label></div>  
                                        <div><label class="info-line">${solicitacao.horario}</p></label ></div>
                                        
                                        <!-- Adicione a linha abaixo para o elemento de status -->
                                        <div class="linha-separadora"></div>    
                                        <div class="objeto-card status"><label class="texto1">Status:</label></div>  
                                        <div class="objeto-card status"><label class="info-line">${solicitacao.status}</p></label></div>

                                        <div class="linha-separadora"></div>    
                                        <div><label class="texto1">Operacao:</label></div>  
                                        <div><label class="info-line">${solicitacao.operacao}</p></label></div>

                                        <div class="linha-separadora"></div>    
                                        <div><label class="texto1">Lote:</label></div>  
                                        <div><label class="info-line">${solicitacao.lote}</p></label></div>

                                        <div class="linha-separadora"></div>    
                                        <div><label class="texto1">Observacao:</label></div>  
                                        <div><label class="info-line1">${solicitacao.obs}</label></div>
                                    </div>
                                </form>
                                `;
                                // Adicione o conte√∫do do cart√£o ao cart√£o
                                card.appendChild(cardContent);

                                // Adicione o cart√£o ao cont√™iner de pedidos
                                pedidosContainer.appendChild(card);

                                // Aplique a classe de status ao cart√£o
                                card.classList.add(solicitacao.status.toLowerCase());
                            });
                        })
                        .catch(error => {
                            console.error('Erro ao buscar dados do servidor:', error);
                        });
}

// Chame a fun√ß√£o de atualiza√ß√£o quando a p√°gina carregar
window.addEventListener('load', function() {
    atualizarDados();

    // Atualize os dados a cada 5 minutos
    setInterval(atualizarDados, 5 * 60 * 1000); // 5 minutos * 60 segundos * 1000 milissegundos
});                
//___________________________________________________________________________________
//___________________________________________________________________________________
// Rota para alterar um cliente pelo ID

        //___________________________________________________________________________________
        // Rota para adicionar um novo cliente
        //___________________________________________________________________________________
        document.getElementById('formNovoSetupUsi').addEventListener('submit', async function(event) {
    event.preventDefault();

    const agora = new Date();
    const dia = agora.getDate().toString().padStart(2, '0');
    const mes = (agora.getMonth() + 1).toString().padStart(2, '0');
    const ano = agora.getFullYear();
    const hora = agora.getHours().toString().padStart(2, '0');
    const minutos = agora.getMinutes().toString().padStart(2, '0');
    const segundos = agora.getSeconds().toString().padStart(2, '0');
    const HRpedido = `${dia}/${mes}/${ano} ${hora}:${minutos}:${segundos}`;

    const login = "Fernando Habeck";
    const cc = document.getElementById('centro-custo').value;
    const maquina = document.getElementById('maquina').value;
    const item = document.getElementById('item').value;
    const operacao = document.getElementById('operacao').value;
    const lote = document.getElementById('lote').value;
    const horario = document.getElementById('hora').value;
    const status = "Aguardando";
    const calibrador = "1";
    const HRfinalizado = "";
    const obs = document.getElementById('observacao').value;

    const novoSetup = {
        HRpedido: HRpedido,
        login: login,
        cc: cc,
        maquina: maquina,
        item: item,
        operacao: operacao,
        lote: lote,
        horario: horario,
        status: status,
        calibrador: calibrador,
        HRfinalizado: HRfinalizado,
        obs: obs
    };

    try {
        const response = await fetch('http://localhost:5500/setupusi', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(novoSetup)
        });

        const data = await response.json();
        console.log('Resposta do servidor:', data);
        
        // Ap√≥s enviar a solicita√ß√£o, atualize os dados para refletir as altera√ß√µes
        atualizarDados();
    } catch (error) {
        console.error('Erro ao enviar solicita√ß√£o:', error);
    }
});

//___________________________________________________________________________________

// Dentro do seu script no HTML
document.getElementById('pedidosContainer').addEventListener('click', function(event) {
    const target = event.target;
    if (target.classList.contains('button-aguardando') || 
        target.classList.contains('button-atendendo') || 
        target.classList.contains('button-concluido') || 
        target.classList.contains('button-cancelado')) {
        
        const status = target.textContent.trim(); // Obt√©m o texto do bot√£o, que ser√° o status
        const card = target.closest('.card');

        if (card) {
            const infoLineElement = card.querySelector('.info-line');
            if (infoLineElement) {
                const id = infoLineElement.textContent.trim(); // Define a vari√°vel id aqui
                // Fa√ßa o que for necess√°rio com o ID aqui

                // Fa√ßa uma solicita√ß√£o fetch para atualizar o status do setup
                fetch(`http://localhost:5500/atualizar-status/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status: status })
                })
                .then(response => {
                    if (response.ok) {
                        console.log(`Status atualizado para ${status} com sucesso.`);
                        // Recarregue os dados ap√≥s a atualiza√ß√£o do status
                        atualizarDados();
                    } else {
                        console.error('Erro ao atualizar o status.');
                    }
                })
                .catch(error => {
                    console.error('Erro ao atualizar o status:', error);
                });
            } else {
                console.error('Elemento com a classe .info-line n√£o encontrado.');
            }
        } else {
            console.error('Elemento com a classe .card n√£o encontrado.');
        }
    } 
});
//___________________________________________________________________________________
// Excluir setup com sucesso
//___________________________________________________________________________________
document.getElementById('pedidosContainer').addEventListener('click', async function(event) {
    const target = event.target;
    if (target.classList.contains('button-excluir')) {
        const card = target.closest('.card');

        if (card) {
            const infoLineElement = card.querySelector('.info-line');
            if (infoLineElement) {
                const id = infoLineElement.textContent.trim(); // Obt√©m o ID do setup

                try {
                    const response = await fetch(`http://localhost:5500/delete/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ id: id })
                    });

                    if (response.ok) {
                        console.log(`Setup exclu√≠do ${id} com sucesso.`);
                        // Recarregue os dados ap√≥s a exclus√£o do setup
                        atualizarDados();
                    } else {
                        console.error('Erro ao excluir o setup.');
                    }
                } catch (error) {
                    console.error('Erro ao excluir o setup:', error);
                }
            } else {
                console.error('Elemento com a classe .info-line n√£o encontrado.');
            }
        } else {
            console.error('Elemento com a classe .card n√£o encontrado.');
        }
    }
});

//___________________________________________________________________________________
// Adicione um evento de clique para cada bot√£o de status
//___________________________________________________________________________________
                    
function openForm() {
    document.getElementById("overlay").style.display = "block";
}

function closeForm() {
    document.getElementById("overlay").style.display = "none";
}
    </script>
</body>
</html>

üßø.env
# The webapi port. Ex: 3000
PORT=5500
#CONNECTION_STRING=mysql://root:96213087@localhost:3306/gdm
#CONNECTION_STRING=mysql://sa_gdm:Rf!X@-GFPQMX@SRVSQL01/MSSQLATTICA:1433/GDM

DB_USER=sa_gdm
DB_PASSWORD=Rf!X@-GFPQMX
DB_SERVER=SRVSQL01\MSSQLATTICA
DB_DATABASE=gdm


‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ


üõ°Ô∏èMySQL SERVER
üßødb.js
const mysql = require('mysql2/promise');

const client = mysql.createPool(process.env.CONNECTION_STRING);

//___________________________________________________________________________________
// Defina a rota /clientes aqui
//___________________________________________________________________________________
async function selectCustomers() {
    const res = await client.query('SELECT * FROM setupusi');
    return res[0];
}
//___________________________________________________________________________________
// Incluindo um cliente
//___________________________________________________________________________________
async function insertCustomer( HRpedido, login, cc, maquina, item, operacao, lote, horario, status, calibrador, HRfinalizado, obs) {
    const res = await client.query('INSERT INTO setupusi ( HRpedido, login, cc, maquina, item, operacao, lote, horario, status, calibrador, HRfinalizado, obs) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [ HRpedido, login, cc, maquina, item, operacao, lote, horario, status, calibrador, HRfinalizado, obs]);
    return res[0]; // Retorna informa√ß√µes sobre a inser√ß√£o
}
//___________________________________________________________________________________
// Alterar dados no servidor
// No seu arquivo bd.js

async function updateStatus(id, novoStatus) {
    const query = 'UPDATE setupusi SET status = ? WHERE Id = ?';
    const values = [novoStatus, id];

    try {
        const result = await client.query(query, values);
        return result;
    } catch (error) {
        throw error;
    }
}

//___________________________________________________________________________________
// Fun√ß√£o para excluir um cliente pelo ID
//___________________________________________________________________________________

async function excluirSetupUsiPorId(id) {
    const res = await client.query('DELETE FROM setupusi WHERE id = ?', [id]);
    return res[0];
}

//___________________________________________________________________________________
//___________________________________________________________________________________

module.exports = { selectCustomers, insertCustomer, updateStatus, excluirSetupUsiPorId };


üßøconnSetupUsi.js
require("dotenv").config();

const express = require('express');
const app = express();
const port = process.env.PORT;
//const db = require('mssql'); // Importe o pacote mssql
const db = require('./db'); // Importe o arquivo db.js
const cors = require('cors'); // Importe o pacote CORS

app.use(express.json());
app.use(cors()); // Use o middleware do CORS para permitir solicita√ß√µes de todas as origens

app.get('/', (req, res) => res.json({ message: 'Funcionando!' }));

//___________________________________________________________________________________
// Rota para adicionar um novo cliente
//___________________________________________________________________________________
app.post('/setupusi', async (req, res) => {
    const { HRpedido, login, cc, maquina, item, operacao, lote, horario, status, calibrador, HRfinalizado, obs} = req.body;

    try {
        const result = await db.insertCustomer( HRpedido, login, cc, maquina, item, operacao, lote, horario, status, calibrador, HRfinalizado, obs);
        res.status(201).json({ message: 'Setup adicionado com sucesso', id: result.insertId });
    } catch (error) {
        console.error('Erro ao adicionar Setup:', error);
        res.status(500).json({ error: 'Erro ao adicionar Setup' });
    }
});
//___________________________________________________________________________________
// carregar setup
//___________________________________________________________________________________
// Rota para obter os setups existentes
app.get('/setupusi', async (req, res) => {
    try {
        const setups = await db.selectCustomers(); // Chame a fun√ß√£o que obt√©m os setups do banco de dados
        res.status(200).json(setups); // Envie os setups obtidos como resposta
    } catch (error) {
        console.error('Erro ao buscar setups:', error);
        res.status(500).json({ error: 'Erro ao buscar setups' });
    }
});
//___________________________________________________________________________________
// Rota para atualizar o status da solicita√ß√£o
// Em connSetupUsi.js

app.put('/atualizar-status/:id', async (req, res) => {
    const setupId = req.params.id;
    const { status } = req.body;

    try {
        const result = await db.updateStatus(setupId, status);
        res.status(200).json({ message: 'Status atualizado com sucesso.' });
    } catch (error) {
        console.error('Erro ao atualizar o status:', error);
        res.status(500).json({ error: 'Erro interno ao atualizar o status.' });
    }
});
//___________________________________________________________________________________
// Rota para lidar com a exclus√£o de um setup de usinagem pelo ID
//___________________________________________________________________________________
app.delete('/delete/:id', async (req, res) => {
    const id = req.params.id;

    try {
        const result = await db.excluirSetupUsiPorId(id);
        res.status(200).json({ message: 'Setup de usinagem exclu√≠do com sucesso' });
    } catch (error) {
        console.error('Erro ao excluir setup de usinagem:', error);
        res.status(500).json({ error: 'Erro ao excluir setup de usinagem' });
    }
});
//___________________________________________________________________________________
// Inicia o servidor
//___________________________________________________________________________________
app.listen(port, () => {
    console.log(`API funcionando na porta ${port}`);
});



üßøSolicitarSetupUsinagem.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <title>Listagem de Agendamentos</title>
</head>
<body>
    
    <div class="header">
        <div class="LOGO1">
            <a href="/html/Menu.html">
                <img src="/img/Usinagem/Sem t√≠tulo.png" alt="Imagem 3D">
            </a>
        </div>
        <div class="LOGO2">
            <img src="/img/docol_logo.png" alt="Imagem 3D">
        </div>
        <h1>Lista de Equipamentos</h1>
        <div class="sidebar-buttons-container">
            <button class="sidebar-button" type="button" onclick="openForm()">Solicitar Setup</button>
            <button class="sidebar-button" type="button" onclick="MostrarLista()">Mostrar Lista</button>
            <button class="sidebar-button" type="button" onclick="MostrarGrade()">Mostrar Grade</button>
        </div>
    </div>
    <div class="linha-separadora1"></div>

    <!-- Formul√°rio sobreposto -->
    <div class="overlay" id="overlay">
        <div class="modal">
            <h2>Solicita√ß√£o de Setup</h2>
            <form id="formNovoSetupUsi">
                <label for="centro-custo">Centro de Custo:</label>
                <input type="text" id="centro-custo" name="centro-custo"><br>

                <label for="maquina">M√°quina:</label>
                <input type="text" id="maquina" name="maquina"><br>

                <label for="item">Item:</label>
                <input type="text" id="item" name="item"><br>

                <label for="hora">Hora:</label>
                <input type="time" id="hora" name="hora"><br>

                <label for="operacao">Opera√ß√£o:</label>
                <select id="operacao" name="operacao">
                    <option value="1">1¬™ Opera√ß√£o</option>
                    <option value="2">2¬™ Opera√ß√£o</option>
                    <option value="3">3¬™ Opera√ß√£o</option>
                </select><br>

                <label for="lote">Lote:</label>
                <input type="text" id="lote" name="lote"><br>

                <label for="observacao">Observa√ß√£o:</label>
                <textarea id="observacao" name="observacao"></textarea><br>

                <button type="submit">Solicitar</button>
                <button type="button" onclick="closeForm()">Cancelar</button>

            </form>
        </div>
    </div>
    <div id="pedidosContainer"></div>
    <!-- Restante do seu HTML -->
    <div class="container1">   
        <div class="scroll-wrapper">
            <div id="pedidosContainer" class="card-container">
                <!-- Cart√µes ser√£o adicionados aqui dinamicamente -->
            </div>    
        </div>
    </div>

    <div id="agendamentosContainer1"></div>

    <link rel="stylesheet" href="/css/global.css">
    <link rel="stylesheet" href="/css/SolicitarSetupUsinagem.css">

    <script>
// Defina a fun√ß√£o para atualizar os dados
function atualizarDados() {
    // Fa√ßa uma solicita√ß√£o fetch para a rota /setupusi
    fetch('http://localhost:5500/setupusi')
        .then(response => response.json())
        .then(data => {
            // Limpe o conte√∫do do cont√™iner antes de adicionar novos elementos
            const pedidosContainer = document.getElementById('pedidosContainer');
            pedidosContainer.innerHTML = '';

            // Itere sobre os dados recebidos e crie um cart√£o para cada solicita√ß√£o
            data.forEach(solicitacao => {
                // Cria um novo elemento div para representar o cart√£o
                const card = document.createElement('div');
                card.classList.add('card');

                // Crie um novo elemento div para representar o conte√∫do do cart√£o
                const cardContent = document.createElement('div');
                cardContent.classList.add('card-content');

                // Defina o conte√∫do do cart√£o com base nos dados da solicita√ß√£o
                cardContent.innerHTML = `

                                    <button class="menu-button">Menu</button>
                                    <div class="status-buttons">
                                        <button class="button-aguardando">Aguardando</button>
                                        <button class="button-atendendo">Atendendo</button>
                                        <button class="button-concluido">Conclu√≠do</button>
                                        <button class="button-cancelado">Cancelado</button>
                                        <button class="button-excluir">Excluir</button>
                                    </div>

                                    <form id="formAlterarSetup">
                                    <div class="info0">
                                        <div><label class="texto1">Id:</label></div>  
                                        <div><label class="info-line">${solicitacao.Id}</p></label ></div>

                                        <div class="linha-separadora"></div> 
                                        <div><label class="texto1">CentroCusto:</label></div>  
                                        <div><label class="info-line">${solicitacao.cc}</p></label ></div>

                                        <div class="linha-separadora"></div>    
                                        <div><label class="texto1">Item:</label></div>  
                                        <div><label class="info-line">${solicitacao.item}</p></label ></div>

                                        <div class="linha-separadora"></div>    
                                        <div><label class="texto1">Hora:</label></div>  
                                        <div><label class="info-line">${solicitacao.horario}</p></label ></div>
                                        
                                        <!-- Adicione a linha abaixo para o elemento de status -->
                                        <div class="linha-separadora"></div>    
                                        <div class="objeto-card status"><label class="texto1">Status:</label></div>  
                                        <div class="objeto-card status"><label class="info-line">${solicitacao.status}</p></label></div>

                                        <div class="linha-separadora"></div>    
                                        <div><label class="texto1">Operacao:</label></div>  
                                        <div><label class="info-line">${solicitacao.operacao}</p></label></div>

                                        <div class="linha-separadora"></div>    
                                        <div><label class="texto1">Lote:</label></div>  
                                        <div><label class="info-line">${solicitacao.lote}</p></label></div>

                                        <div class="linha-separadora"></div>    
                                        <div><label class="texto1">Observacao:</label></div>  
                                        <div><label class="info-line1">${solicitacao.obs}</label></div>
                                    </div>
                                </form>
                                `;
                                // Adicione o conte√∫do do cart√£o ao cart√£o
                                card.appendChild(cardContent);

                                // Adicione o cart√£o ao cont√™iner de pedidos
                                pedidosContainer.appendChild(card);

                                // Aplique a classe de status ao cart√£o
                                card.classList.add(solicitacao.status.toLowerCase());
                            });
                        })
                        .catch(error => {
                            console.error('Erro ao buscar dados do servidor:', error);
                        });
}

// Chame a fun√ß√£o de atualiza√ß√£o quando a p√°gina carregar
window.addEventListener('load', function() {
    atualizarDados();

    // Atualize os dados a cada 5 minutos
    setInterval(atualizarDados, 5 * 60 * 1000); // 5 minutos * 60 segundos * 1000 milissegundos
});                
//___________________________________________________________________________________
//___________________________________________________________________________________
// Rota para alterar um cliente pelo ID

        //___________________________________________________________________________________
        // Rota para adicionar um novo cliente
        //___________________________________________________________________________________
document.getElementById('formNovoSetupUsi').addEventListener('submit', async function(event) {
    event.preventDefault();


    // Obt√©m a hora atual
    const agora = new Date();

    // Obt√©m os componentes de data e hora atuais
    const dia = agora.getDate().toString().padStart(2, '0'); // Adiciona zero √† esquerda se for necess√°rio
    const mes = (agora.getMonth() + 1).toString().padStart(2, '0'); // Adiciona zero √† esquerda se for necess√°rio
    const ano = agora.getFullYear();
    const hora = agora.getHours().toString().padStart(2, '0'); // Adiciona zero √† esquerda se for necess√°rio
    const minutos = agora.getMinutes().toString().padStart(2, '0'); // Adiciona zero √† esquerda se for necess√°rio
    const segundos = agora.getSeconds().toString().padStart(2, '0'); // Adiciona zero √† esquerda se for necess√°rio

    // Formata a hora atual como uma string no formato desejado
    const HRpedido = `${dia}/${mes}/${ano} ${hora}:${minutos}:${segundos}`;

    const login = "Fernando Habeck";
    const cc = document.getElementById('centro-custo').value;
    const maquina = document.getElementById('maquina').value;
    const item = document.getElementById('item').value;
    const operacao = document.getElementById('operacao').value;
    const lote = document.getElementById('lote').value;
    const horario = document.getElementById('hora').value;
    const status = "Aguardando";
    const calibrador = "1";
    const HRfinalizado = "";
    const obs = document.getElementById('observacao').value;

    const novoCliente = {
        HRpedido: HRpedido,
        login: login,
        cc: cc,
        maquina: maquina,
        item: item,
        operacao: operacao,
        lote: lote,
        horario: horario,
        status: status,
        calibrador: calibrador,
        HRfinalizado: HRfinalizado,
        obs: obs
    };

    try {
        const response = await fetch('http://localhost:5500/setupusi', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(novoCliente)
        });

        const data = await response.json();
        console.log('Resposta do servidor:', data);
    } catch (error) {
        console.error('Erro ao enviar solicita√ß√£o:', error);
    }
    atualizarDados()
});
//___________________________________________________________________________________

// Dentro do seu script no HTML
document.getElementById('pedidosContainer').addEventListener('click', function(event) {
    const target = event.target;
    if (target.classList.contains('button-aguardando') || 
        target.classList.contains('button-atendendo') || 
        target.classList.contains('button-concluido') || 
        target.classList.contains('button-cancelado')) {
        
        const status = target.textContent.trim(); // Obt√©m o texto do bot√£o, que ser√° o status
        const id = target.closest('.card').querySelector('.info-line').textContent.trim(); // Obt√©m o ID do setup

        // Fa√ßa uma solicita√ß√£o fetch para atualizar o status do setup
        fetch(`http://localhost:5500/atualizar-status/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status: status })
            
        })
        
        .then(response => {
            if (response.ok) {
                console.log(`Status atualizado para ${status} com sucesso.`);
                // Recarregue os dados ap√≥s a atualiza√ß√£o do status
                document.getElementById('atualizarDadosButton').click();
            } else {
                console.error('Erro ao atualizar o status.');
            }
        })
        .catch(error => {
            console.error('Erro ao atualizar o status:', error);
        });
        atualizarDados();
    } 
    atualizarDados();
});
//___________________________________________________________________________________
// Excluir setup com sucesso
//___________________________________________________________________________________
document.getElementById('pedidosContainer').addEventListener('click', function(event) {
    const target = event.target;
    if (target.classList.contains('button-excluir')) {
        
        const id = target.closest('.card').querySelector('.info-line').textContent.trim(); // Obt√©m o ID do setup

        // Fa√ßa uma solicita√ß√£o fetch para atualizar o status do setup
        fetch(`http://localhost:5500/delete/${id}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ id: id })
        })
        .then(response => {
            if (response.ok) {
                console.log(`Setup exclu√≠do ${id} com sucesso.`);
                // Recarregue os dados ap√≥s a atualiza√ß√£o do status
                document.getElementById('atualizarDadosButton').click();
            } else {
                console.error('Erro ao atualizar o status.');
            }
        })
        .catch(error => {
            console.error('Erro ao exclu√≠do o Setup:', error);
        });
        atualizarDados()
    }
    atualizarDados()
});

//___________________________________________________________________________________
// Adicione um evento de clique para cada bot√£o de status
//___________________________________________________________________________________
                    
                function openForm() {
                    document.getElementById("overlay").style.display = "block";
                }

                function closeForm() {
                    document.getElementById("overlay").style.display = "none";
                }
    </script>
</body>
</html>


üßø.env
# The webapi port. Ex: 3000
PORT=5500

#The Connection String to database. Ex: mysql://user:password@server:port/database
CONNECTION_STRING=mysql://root:96213087@localhost:3306/gdm
#"Pedido, login, C C, Maquina, Item, Opera√ß√£o, Lote, Marcado, Status, Calibrador, Finalizado, Obs"
#CONNECTION_STRING=mysql://sa_gdm:Rf!X@-GFPQMX@SRVSQL01/MSSQLATTICA:1433/GDM
